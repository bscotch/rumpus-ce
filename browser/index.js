!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13)}([function(e,t,r){"use strict";var n=r(4),o=r(17),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";function n(e,t,r){void 0===r&&(r="png");var n=Math.max(Math.min(t||128,512),16);return"https://img.bscotch.net/fit-in/"+n+"x"+n+"/avatars/"+e+"."+r}Object.defineProperty(t,"__esModule",{value:!0}),t.csv=function(e){return"string"==typeof e?e:e.join(",")},t.avatarUrl=n,t.attachAvatarUrlToArrayItems=function(e){for(var t=function(e){e.avatarUrl=function(t,r){return void 0===r&&(r="png"),n(e.avatarId,t,r)}},r=0,o=e;r<o.length;r++){t(o[r])}return e},t.cleanQuery=function(e){var t={};if(!e)return t;for(var r=0,n=Object.keys(e);r<n.length;r++){var o=n[r];void 0===e[o]||null===e[o]||Array.isArray(e[o])&&!e[o].length||(t[o]=Array.isArray(e[o])?e[o].join(","):e[o])}return t},t.capitalize=function(e){return e&&"string"==typeof e?""+e[0].toLocaleUpperCase()+e.slice(1):""}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1);function s(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){return(e=[]).nextPage=s,[2,e]}))}))}t.blankResultsPage=s,t.addNextPageSearchFunction=function(e,t,r,o,i,u){var c,l;if(t.nextPage=s,t.length&&(r||!(null===(c=o)||void 0===c?void 0:c.limit)||o.limit==t.length))if(r){var f=r.replace(/.*nextPageToken=([a-z0-9]+).*?/i,"$1");t.nextPage=function(){return u.call(e,{nextPageToken:f,paging:!0},i)}}else{var h=n({},o),d=h.sort||"",p=t[t.length-1],v=d.replace(/^-/,""),y="-"==d[0]?"min":"max";y+=a.capitalize(v),h[y]=p[v]||(null===(l=p.stats)||void 0===l?void 0:l[v]),void 0!==h[y]&&(h.tiebreakerItemId=p._id,t.nextPage=function(){return u.call(e,h,i)})}return t}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=s(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new p(e,t)),1!==c.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var a=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(0),o=r(22),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,u={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?s=r(8):"undefined"!=typeof XMLHttpRequest&&(s=r(8)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){u.headers[e]=n.merge(i)})),e.exports=u}).call(this,r(3))},function(e,t,r){"use strict";var n=r(0),o=r(23),i=r(5),a=r(25),s=r(26),u=r(9);e.exports=function(e){return new Promise((function(t,c){var l=e.data,f=e.headers;n.isFormData(l)&&delete f["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",p=e.auth.password||"";f.Authorization="Basic "+btoa(d+":"+p)}if(h.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,c,n),h=null}},h.onabort=function(){h&&(c(u("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){c(u("Network Error",e,null,h)),h=null},h.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var v=r(27),y=(e.withCredentials||s(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in h&&n.forEach(f,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete f[t]:h.setRequestHeader(t,e)})),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),c(e),h=null)})),void 0===l&&(l=null),h.send(l)}))}},function(e,t,r){"use strict";var n=r(24);e.exports=function(e,t,r,o,i){var a=new Error(e);return n(a,t,r,o,i)}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){t=t||{};var r={};return n.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(["headers","auth","proxy"],(function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])})),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1);t.getLevelheadBookmarks=function(e,t){return o(this,void 0,void 0,(function(){var r,o;return i(this,(function(i){switch(i.label){case 0:return(r=n({},e)).sort=r.sort||"createdAt",[4,this.get("/api/levelhead/bookmarks",n(n({},t),{query:a.cleanQuery(e)}))];case 1:if(200==(o=i.sent()).status)return[2,o.data];throw new Error("Bookmark search failed with status "+o.status)}}))}))},t.bookmarkLevelheadLevel=function(e,t){return o(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return[4,this.put("/api/levelhead/bookmarks/"+e,t)];case 1:if(204!=(r=n.sent()).status)throw console.log(r),new Error(404==r.status?"Level does not exist!":"Unable to bookmark level");return[2,!0]}}))}))},t.unbookmarkLevelheadLevel=function(e,t){return o(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return[4,this.delete("/api/levelhead/bookmarks/"+e,t)];case 1:if(204!=(r=n.sent()).status)throw console.log(r),new Error("Unable to unbookmark level");return[2,!0]}}))}))}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(14));window.RumpusCE=o.default},function(e,t,r){"use strict";(function(e){var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var s=a(r(15)),u=r(32),c=function(){function t(t,r,n){void 0===t&&(t=e.env.RUMPUS_DELEGATION_KEY),void 0===r&&(r="beta"),this.defaultDelegationKey=t,this._server=r,this._baseUrl="local"==r?"http://localhost:8080":"https://"+this._server+".bscotch.net",this._request=s.default.create({baseURL:this._baseUrl,auth:n}),this._levelheadAPI=u.createLevelheadAPI(this)}return Object.defineProperty(t.prototype,"server",{get:function(){return this._server},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"baseUrl",{get:function(){return this._baseUrl},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"levelhead",{get:function(){return this._levelheadAPI},enumerable:!0,configurable:!0}),t.prototype.version=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,this.get("/api/version",{doNotUseKey:!0})];case 1:return e=t.sent(),[2,{server:this._server,rumpus:e.data,terms:e.headers["version-terms"],"terms-rce":e.headers["version-terms-rce"],privacy:e.headers["version-privacy"]}]}}))}))},t.prototype.delegationKeyPermissions=function(e){return o(this,void 0,void 0,(function(){var t;return i(this,(function(r){switch(r.label){case 0:return[4,this.get("/api/delegation/keys/@this",{delegationKey:e})];case 1:if(200==(t=r.sent()).status)return[2,{userId:t.data.userId,passId:t.data.passId,permissions:t.data.permissions}];throw[400,403].includes(t.status)?new Error("Malformed or missing delegation key."):401==t.status?new Error("Expired delegation key."):new Error("Unexpected server response.")}}))}))},t.prototype.get=function(e,t){return this.request("get",e,t)},t.prototype.post=function(e,t){return this.request("post",e,t)},t.prototype.put=function(e,t){return this.request("put",e,t)},t.prototype.patch=function(e,t){return this.request("patch",e,t)},t.prototype.delete=function(e,t){return this.request("delete",e,t)},t.prototype.request=function(e,t,r){var a,s,u,c;return o(this,void 0,void 0,(function(){var o,l,f,h,d;return i(this,(function(i){switch(i.label){case 0:o={},l=(null===(a=r)||void 0===a?void 0:a.delegationKey)||this.defaultDelegationKey,!(null===(s=r)||void 0===s?void 0:s.doNotUseKey)&&l&&(o["Rumpus-Delegation-Key"]=l),(f={method:e,url:t,headers:o,responseType:"json"}).data=null===(u=r)||void 0===u?void 0:u.body,f.params=null===(c=r)||void 0===c?void 0:c.query,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this._request(f)];case 2:return h=i.sent(),[3,4];case 3:if(!(d=i.sent()).response)throw d;return h=d.response,[3,4];case 4:return[2,n(n({},h.data),{headers:h.headers,status:h.status,requestId:h.headers["x-request-id"],remainingRequests:h.headers["x-rate-limit-remaining"]})]}}))}))},t}();t.default=c}).call(this,r(3))},function(e,t,r){e.exports=r(16)},function(e,t,r){"use strict";var n=r(0),o=r(4),i=r(18),a=r(10);function s(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var u=s(r(7));u.Axios=i,u.create=function(e){return s(a(u.defaults,e))},u.Cancel=r(11),u.CancelToken=r(30),u.isCancel=r(6),u.all=function(e){return Promise.all(e)},u.spread=r(31),e.exports=u,e.exports.default=u},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,r){"use strict";var n=r(0),o=r(5),i=r(19),a=r(20),s=r(10);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var n=r(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(0),o=r(21),i=r(6),a=r(7),s=r(28),u=r(29);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(9);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,a={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}})),a):a}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,a){var s=[];s.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&s.push("expires="+new Date(r).toGMTString()),n.isString(o)&&s.push("path="+o),n.isString(i)&&s.push("domain="+i),!0===a&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(11);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(33),o=r(34),i=r(35),a=r(12);t.createLevelheadAPI=function(e){return{aliases:{search:n.getLevelheadAliases.bind(e)},bookmarks:{search:a.getLevelheadBookmarks.bind(e),add:a.bookmarkLevelheadLevel.bind(e),remove:a.unbookmarkLevelheadLevel.bind(e)},levels:{search:o.getLevelheadLevels.bind(e),getTags:o.getLevelheadLevelTags.bind(e),getLikes:o.getLevelheadLevelLikes.bind(e),getFavorites:o.getLevelheadLevelFavorites.bind(e)},players:{search:i.getLevelheadPlayers.bind(e),getPlayer:i.getLevelheadPlayer.bind(e),getLikedLevels:i.getLevelheadLikedLevels.bind(e),getFavoritedLevels:i.getLevelheadFavoritedLevels.bind(e),getFollowers:i.getLevelheadPlayerFollowers.bind(e),getFollowing:i.getLevelheadPlayerFollowing.bind(e),follow:i.followLevelheadPlayer.bind(e),unfollow:i.unfollowLevelheadPlayer.bind(e)}}}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1);t.getLevelheadAliases=function(e,t,r){return o(this,void 0,void 0,(function(){var o,s;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/aliases",n(n({},r),{query:a.cleanQuery(n(n({},t),{userIds:a.csv(e)}))}))];case 1:if(200==(o=i.sent()).status)return s=o.data,a.attachAvatarUrlToArrayItems(s),[2,s];throw new Error("Alias search failed with status "+o.status)}}))}))}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1),s=r(12),u=r(2),c=r(2);function l(e,t,r,s){var u;return o(this,void 0,void 0,(function(){var o,f,h,d=this;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/levels/"+t+"/"+e,n(n({},s),{query:a.cleanQuery(r)}))];case 1:if(200==(o=i.sent()).status)return f=o.data,h=!(!f.length||(null===(u=r)||void 0===u?void 0:u.limit)&&r.limit!=f.length)&&f[f.length-1]._id,f.nextPage=function(){if(h){var o=n(n({},r),{beforeId:h});return l.bind(d)(e,t,o,s)}return c.blankResultsPage()},[2,f];throw new Error("Level "+e+" failed with status "+o.status)}}))}))}function f(e,t,r){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,l.call(this,"likes",e,t,r)]}))}))}function h(e,t,r){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,l.call(this,"favorites",e,t,r)]}))}))}t.getLevelheadLevelTags=function(e){return o(this,void 0,void 0,(function(){var t;return i(this,(function(r){switch(r.label){case 0:return[4,this.get("/api/levelhead/level-tags/counts",n({},e))];case 1:if(200==(t=r.sent()).status)return[2,t.data];throw new Error("Level tags request failed with status "+t.status)}}))}))},t.getLevelheadLevelLikes=f,t.getLevelheadLevelFavorites=h,t.getLevelheadLevels=function e(t,r){return o(this,void 0,void 0,(function(){var o,c,l,d=this;return i(this,(function(i){switch(i.label){case 0:return(o=n({},t)).sort=o.sort||"createdAt",[4,this.get("/api/levelhead/levels",n(n({},r),{query:a.cleanQuery(o)}))];case 1:if(200==(c=i.sent()).status)return l=c.data.map((function(e){return function(e,t){var r=t;return r.getLikes=function(r,n){return f.call(e,t.levelId,r,n)},r.getFavorites=function(r,n){return h.call(e,t.levelId,r,n)},r.bookmark=function(r){return s.bookmarkLevelheadLevel.call(e,t.levelId,r)},r.unbookmark=function(r){return s.unbookmarkLevelheadLevel.call(e,t.levelId,r)},r}(d,e)})),a.attachAvatarUrlToArrayItems(l),u.addNextPageSearchFunction(this,l,c.next,o,r,e),[2,l];throw new Error("Level search failed with status "+c.status)}}))}))}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{u(n.next(e))}catch(e){i(e)}}function s(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(1),s=r(2);function u(e,t,r,c){var l;return o(this,void 0,void 0,(function(){var o,f,h,d=this;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/players/"+t+"/"+e,n(n({},c),{query:a.cleanQuery(r)}))];case 1:if(200==(o=i.sent()).status)return f=o.data,h=!(!f.length||(null===(l=r)||void 0===l?void 0:l.limit)&&r.limit!=f.length)&&f[f.length-1]._id,f.nextPage=function(){if(h){var o=n(n({},r),{beforeId:h});return u.bind(d)(e,t,o,c)}return s.blankResultsPage()},[2,f];throw new Error("Level "+e+" failed with status "+o.status)}}))}))}function c(e,t,r){return void 0===e&&(e="@me"),o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,u.call(this,"likes",e,t,r)]}))}))}function l(e,t,r){return void 0===e&&(e="@me"),o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,u.call(this,"favorites",e,t,r)]}))}))}function f(e,t,r,u){var c;return o(this,void 0,void 0,(function(){var o,l,h,d=this;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/players/"+t+"/"+e,n(n({},u),{query:a.cleanQuery(r)}))];case 1:if(200==(o=i.sent()).status)return l=o.data,h=!(!l.length||(null===(c=r)||void 0===c?void 0:c.limit)&&r.limit!=l.length)&&l[l.length-1]._id,l.nextPage=function(){if(h){var o=n(n({},r),{beforeId:h});return f.bind(d)(e,t,o,u)}return s.blankResultsPage()},[2,l];throw new Error("Player "+e+" search failed with status "+o.status)}}))}))}function h(e,t,r){return void 0===e&&(e="@me"),o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,f.call(this,"followers",e,t,r)]}))}))}function d(e,t,r){return void 0===e&&(e="@me"),o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,f.call(this,"following",e,t,r)]}))}))}function p(e,t){return o(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return[4,this.put("/api/levelhead/following/"+e,t)];case 1:if(204!=(r=n.sent()).status)throw new Error(404==r.status?"Player does not exist!":"Unable to follow player");return[2,!0]}}))}))}function v(e,t){return o(this,void 0,void 0,(function(){return i(this,(function(r){switch(r.label){case 0:return[4,this.delete("/api/levelhead/following/"+e,t)];case 1:if(204!=r.sent().status)throw new Error("Unable to unfollow player");return[2,!0]}}))}))}function y(e,t){return o(this,void 0,void 0,(function(){var r,o,u,f=this;return i(this,(function(i){switch(i.label){case 0:return(r=n({},e)).sort=r.sort||"createdAt",[4,this.get("/api/levelhead/players",n(n({},t),{query:a.cleanQuery(r)}))];case 1:if(200==(o=i.sent()).status)return u=o.data.map((function(e){return function(e,t){var r=t;return r.getLikedLevels=function(r,n){return c.call(e,t.userId,r,n)},r.getFavoritedLevels=function(r,n){return l.call(e,t.userId,r,n)},r.getFollowers=function(r,n){return h.call(e,t.userId,r,n)},r.getFollowing=function(r,n){return d.call(e,t.userId,r,n)},r.follow=function(r){return p.call(e,t.userId,r)},r.unfollow=function(r){return v.call(e,t.userId,r)},r}(f,e)})),s.addNextPageSearchFunction(this,u,o.next,r,t,y),[2,u];throw new Error("Player search failed with status "+o.status)}}))}))}t.getLevelheadLikedLevels=c,t.getLevelheadFavoritedLevels=l,t.getLevelheadPlayerFollowers=h,t.getLevelheadPlayerFollowing=d,t.followLevelheadPlayer=p,t.unfollowLevelheadPlayer=v,t.getLevelheadPlayers=y,t.getLevelheadPlayer=function(e,t){return void 0===e&&(e="@me"),o(this,void 0,void 0,(function(){var r;return i(this,(function(n){switch(n.label){case 0:return[4,y.call(this,{userIds:e,limit:1},t)];case 1:if(!(r=n.sent()).length)throw new Error("That player does not exist");return[2,r[0]]}}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,