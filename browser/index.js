!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=13)}([function(e,t,r){"use strict";var n=r(4),o=r(16),i=Object.prototype.toString;function s(e){return"[object Array]"===i.call(e)}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.csv=function(e){return"string"==typeof e?e:e.join(",")},t.cleanQuery=function(e){var t={};if(!e)return t;for(var r=0,n=Object.keys(e);r<n.length;r++){var o=n[r];void 0===e[o]||null===e[o]||Array.isArray(e[o])&&!e[o].length||(t[o]=Array.isArray(e[o])?e[o].join(","):e[o])}return t}},function(e,t,r){"use strict";(function(e){var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var a=s(r(14)),u=r(12),c=function(){function t(t,r,n){void 0===t&&(t=e.env.RUMPUS_DELEGATION_KEY),void 0===r&&(r="beta"),this.defaultDelegationKey=t,this._server=r,this._baseUrl="local"==r?"http://localhost:8080":"https://"+this._server+".bscotch.net",this._request=a.default.create({baseURL:this._baseUrl,auth:n}),this._levelheadAPI=u.createLevelheadAPI(this)}return Object.defineProperty(t.prototype,"baseUrl",{get:function(){return this._baseUrl},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"levelhead",{get:function(){return this._levelheadAPI},enumerable:!0,configurable:!0}),t.prototype.version=function(){return o(this,void 0,void 0,(function(){var e;return i(this,(function(t){switch(t.label){case 0:return[4,this.get("/api/version",{doNotUseKey:!0})];case 1:return e=t.sent(),[2,{server:this._server,rumpus:e.data,terms:e.headers["version-terms"],"terms-rce":e.headers["version-terms-rce"],privacy:e.headers["version-privacy"]}]}}))}))},t.prototype.delegationKeyPermissions=function(e){return o(this,void 0,void 0,(function(){var t;return i(this,(function(r){switch(r.label){case 0:return[4,this.get("/api/delegation/keys/@this",{delegationKey:e})];case 1:if(200==(t=r.sent()).status)return[2,{userId:t.data.userId,passId:t.data.passId,permissions:t.data.permissions}];throw[400,403].includes(t.status)?new Error("Malformed or missing delegation key."):401==t.status?new Error("Expired delegation key."):new Error("Unexpected server responsel.")}}))}))},t.prototype.get=function(e,t){return this.request("get",e,t)},t.prototype.post=function(e,t){return this.request("post",e,t)},t.prototype.put=function(e,t){return this.request("put",e,t)},t.prototype.patch=function(e,t){return this.request("patch",e,t)},t.prototype.delete=function(e,t){return this.request("delete",e,t)},t.prototype.request=function(e,t,r){var s,a,u,c;return o(this,void 0,void 0,(function(){var o,l,f,h,p;return i(this,(function(i){switch(i.label){case 0:o={},l=(null===(s=r)||void 0===s?void 0:s.delegationKey)||this.defaultDelegationKey,!(null===(a=r)||void 0===a?void 0:a.doNotUseKey)&&l&&(o["Rumpus-Delegation-Key"]=l),(f={method:e,url:t,headers:o,responseType:"json"}).data=null===(u=r)||void 0===u?void 0:u.body,f.params=null===(c=r)||void 0===c?void 0:c.query,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this._request(f)];case 2:return h=i.sent(),[3,4];case 3:if(!(p=i.sent()).response)throw p;return h=p.response,[3,4];case 4:return[2,n(n({},h.data),{headers:h.headers,status:h.status,requestId:h.headers["x-request-id"],remainingRequests:h.headers["x-rate-limit-remaining"]})]}}))}))},t}();t.default=c}).call(this,r(3))},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(e){n=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=a(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new d(e,t)),1!==c.length||l||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var s=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),i=s.join("&")}if(i){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(0),o=r(21),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?a=r(8):"undefined"!=typeof XMLHttpRequest&&(a=r(8)),a),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){u.headers[e]=n.merge(i)})),e.exports=u}).call(this,r(3))},function(e,t,r){"use strict";var n=r(0),o=r(22),i=r(5),s=r(24),a=r(25),u=r(9);e.exports=function(e){return new Promise((function(t,c){var l=e.data,f=e.headers;n.isFormData(l)&&delete f["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",d=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+d)}if(h.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?s(h.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,c,n),h=null}},h.onabort=function(){h&&(c(u("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){c(u("Network Error",e,null,h)),h=null},h.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",h)),h=null},n.isStandardBrowserEnv()){var v=r(26),y=(e.withCredentials||a(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;y&&(f[e.xsrfHeaderName]=y)}if("setRequestHeader"in h&&n.forEach(f,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete f[t]:h.setRequestHeader(t,e)})),e.withCredentials&&(h.withCredentials=!0),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),c(e),h=null)})),void 0===l&&(l=null),h.send(l)}))}},function(e,t,r){"use strict";var n=r(23);e.exports=function(e,t,r,o,i){var s=new Error(e);return n(s,t,r,o,i)}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){t=t||{};var r={};return n.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(["headers","auth","proxy"],(function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])})),n.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});i(r(2));var s=r(31),a=r(32),u=r(33);t.blankResultsPage=function e(){return n(this,void 0,void 0,(function(){var t;return o(this,(function(r){return(t=[]).nextPage=e,[2,t]}))}))},t.createLevelheadAPI=function(e){return{aliases:{search:s.getLevelheadAliases.bind(e)},levels:{search:a.getLevelheadLevels.bind(e),tags:a.getLevelheadLevelTags.bind(e),likes:a.getLevelheadLevelLikes.bind(e),favorites:a.getLevelheadLevelFavorites.bind(e)},profiles:{search:u.getLevelheadProfiles.bind(e)}}}},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(2));window.RumpusCE=o.default},function(e,t,r){e.exports=r(15)},function(e,t,r){"use strict";var n=r(0),o=r(4),i=r(17),s=r(10);function a(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var u=a(r(7));u.Axios=i,u.create=function(e){return a(s(u.defaults,e))},u.Cancel=r(11),u.CancelToken=r(29),u.isCancel=r(6),u.all=function(e){return Promise.all(e)},u.spread=r(30),e.exports=u,e.exports.default=u},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,r){"use strict";var n=r(0),o=r(5),i=r(18),s=r(19),a=r(10);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[s,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var n=r(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(0),o=r(20),i=r(6),s=r(7),a=r(27),u=r(28);function c(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return c(e),e.baseURL&&!a(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return c(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(c(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t,r){"use strict";var n=r(0);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(9);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,s={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([r]):s[t]?s[t]+", "+r:r}})),s):s}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(0);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),n.isString(o)&&a.push("path="+o),n.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(11);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1);t.getLevelheadAliases=function(e,t,r){return o(this,void 0,void 0,(function(){var o;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/aliases",n(n({},r),{query:s.cleanQuery(n(n({},t),{userIds:s.csv(e)}))}))];case 1:if(200==(o=i.sent()).status)return[2,o.data];throw new Error("Alias search failed with status "+o.status)}}))}))}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1),a=r(12),u={};function c(e,t,r,u){var l;return o(this,void 0,void 0,(function(){var o,f,h,p,d=this;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/levels/"+t+"/"+e,n(n({},u),{query:s.cleanQuery(r)}))];case 1:if(200==(o=i.sent()).status)return f=o.data,(h=!(!f.length||(null===(l=r)||void 0===l?void 0:l.limit)&&r.limit!=f.length)&&f[f.length-1]._id)?(p=n(n({},r),{beforeId:h}),f.nextPage=function(){return c.bind(d)(e,t,p,u)}):f.nextPage=a.blankResultsPage,[2,f];throw new Error("Level "+e+" failed with status "+o.status)}}))}))}t.getLevelheadLevelTags=function(e){return o(this,void 0,void 0,(function(){var t,r,o,s,a;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/level-tags/counts",n({},e))];case 1:if(200==(t=i.sent()).status){for(r=t.data,u={},o=0,s=r;o<s.length;o++)a=s[o],u[a.tag]=a.name;return[2,r]}throw new Error("Level tags request failed with status "+t.status)}}))}))},t.getLevelheadLevels=function(e,t){return o(this,void 0,void 0,(function(){var r,o,a,c,l,f,h,p,d;return i(this,(function(i){switch(i.label){case 0:return[4,this.get("/api/levelhead/levels",n(n({},t),{query:s.cleanQuery(e)}))];case 1:if(200==(r=i.sent()).status){for(o=r.data,a=0,c=o;a<c.length;a++){for(l=c[a],f=[],h=0,p=l.tags;h<p.length;h++)d=p[h],f.push(u[d]);l.localizedTags=f.filter((function(e){return e}))}return[2,o]}throw new Error("Level search failed with status "+r.status)}}))}))},t.getLevelheadLevelLikes=function(e,t,r){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,c.call(this,"likes",e,t,r)]}))}))},t.getLevelheadLevelFavorites=function(e,t,r){return o(this,void 0,void 0,(function(){return i(this,(function(n){return[2,c.call(this,"favorites",e,t,r)]}))}))}},function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}u((n=n.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,n=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=r(1);t.getLevelheadProfiles=function(e,t){return o(this,void 0,void 0,(function(){var r;return i(this,(function(o){switch(o.label){case 0:return[4,this.get("/api/levelhead/players",n(n({},t),{query:s.cleanQuery(e)}))];case 1:if(200==(r=o.sent()).status)return[2,r.data];throw new Error("Profile search failed with status "+r.status)}}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL3V0aWxpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9SdW1wdXNDRS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL3NyYy9saWIvYXBpL2luZGV4LnRzIiwid2VicGFjazovLy8uL2Jyb3dzZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9hcGkvbGV2ZWxoZWFkL2FsaWFzZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9hcGkvbGV2ZWxoZWFkL2xldmVscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL2FwaS9sZXZlbGhlYWQvcHJvZmlsZXMudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImxlbmd0aCIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJhIiwiYiIsInRoaXNBcmciLCJ0cmltIiwic3RyIiwicmVwbGFjZSIsIml0ZW1zIiwiam9pbiIsInF1ZXJ5IiwiY2xlYW5RdWVyeSIsImtleXMiLCJmaWVsZCIsIkFycmF5IiwiZGVmYXVsdERlbGVnYXRpb25LZXkiLCJzZXJ2ZXIiLCJhdXRoIiwicHJvY2VzcyIsImVudiIsIlJVTVBVU19ERUxFR0FUSU9OX0tFWSIsInRoaXMiLCJfc2VydmVyIiwiX2Jhc2VVcmwiLCJfcmVxdWVzdCIsImJhc2VVUkwiLCJfbGV2ZWxoZWFkQVBJIiwiY3JlYXRlTGV2ZWxoZWFkQVBJIiwidmVyc2lvbiIsImRvTm90VXNlS2V5IiwicmVzIiwicnVtcHVzIiwiZGF0YSIsInRlcm1zIiwiaGVhZGVycyIsInByaXZhY3kiLCJkZWxlZ2F0aW9uS2V5UGVybWlzc2lvbnMiLCJkZWxlZ2F0aW9uS2V5Iiwic3RhdHVzIiwidXNlcklkIiwicGFzc0lkIiwicGVybWlzc2lvbnMiLCJpbmNsdWRlcyIsIkVycm9yIiwidXJsIiwib3B0aW9ucyIsInJlcXVlc3QiLCJwb3N0IiwicHV0IiwicGF0Y2giLCJkZWxldGUiLCJtZXRob2QiLCJyZXFPcHRzIiwicmVzcG9uc2VUeXBlIiwiYm9keSIsInBhcmFtcyIsInJlc3BvbnNlIiwicmVxdWVzdElkIiwicmVtYWluaW5nUmVxdWVzdHMiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImUiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImNvbmNhdCIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInB1c2giLCJhcHBseSIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwidXRpbHMiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsInRvSVNPU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImhhc2htYXJrSW5kZXgiLCJpbmRleE9mIiwic2xpY2UiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJwYXJzZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwib3BlbiIsInRvVXBwZXJDYXNlIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwicHJvbWlzZSIsInRoZW4iLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJlbmhhbmNlRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJwcm9wIiwiQ2FuY2VsIiwiYmxhbmtSZXN1bHRzUGFnZSIsInJlc3VsdHMiLCJuZXh0UGFnZSIsImNsaWVudCIsImFsaWFzZXMiLCJzZWFyY2giLCJnZXRMZXZlbGhlYWRBbGlhc2VzIiwibGV2ZWxzIiwiZ2V0TGV2ZWxoZWFkTGV2ZWxzIiwidGFncyIsImdldExldmVsaGVhZExldmVsVGFncyIsImxpa2VzIiwiZ2V0TGV2ZWxoZWFkTGV2ZWxMaWtlcyIsImZhdm9yaXRlcyIsImdldExldmVsaGVhZExldmVsRmF2b3JpdGVzIiwicHJvZmlsZXMiLCJnZXRMZXZlbGhlYWRQcm9maWxlcyIsIlJ1bXB1c0NFIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJkZWZhdWx0IiwiY29uc3RydWN0b3IiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic2hpZnQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaWQiLCJoIiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwicmVhc29uIiwiZm5zIiwibm9ybWFsaXplZE5hbWUiLCJpc0F4aW9zRXJyb3IiLCJ0b0pTT04iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJzcGxpdCIsImxpbmUiLCJzdWJzdHIiLCJvcmlnaW5VUkwiLCJtc2llIiwidGVzdCIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiY3JlYXRlRWxlbWVudCIsInJlc29sdmVVUkwiLCJocmVmIiwic2V0QXR0cmlidXRlIiwicHJvdG9jb2wiLCJob3N0IiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwicmVsYXRpdmVVUkwiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJzb3VyY2UiLCJjYWxsYmFjayIsImFyciIsInVzZXJJZHMiLCJjc3YiLCJfY2FjaGVkbG9jYWxpemVkVGFncyIsImdldExldmVsaGVhZExldmVsTGlzdCIsImxpc3RUeXBlIiwibGV2ZWxJZCIsInVzZXJzIiwibGFzdElkIiwibGltaXQiLCJfaWQiLCJiZWZvcmVJZCIsInRhZyIsImxldmVsIiwibG9jYWxpemVkVGFncyIsImZpbHRlciIsIngiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFp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QU9nUSxHQUdQLE1BQU0sSUFBSXhKLE1BQU0seUNBQXlDYixFQUFJUSxnQkFJakUsOEJBQ0k1QixFQUNBbUMsRyxnSEFFVSxTQUFNeEIsS0FBSzVFLElBQUksd0JBQXVCLE9BQzdDb0csR0FBTyxDQUNWbkMsTUFBTSxFQUFBQyxXQUFXRCxPLE9BRW5CLEdBQWUsTUFKVG9CLEVBQU0sVUFJTFEsT0FBWSxDQUVqQixJQURNMkosRUFBU25LLEVBQUlFLEtBQ25CLElBQW1CLEVBQUFpSyxFQUFBLGVBQU8sQ0FFeEIsSUFGUWlILEVBQUssS0FDUEMsRUFBZ0IsR0FDdEIsSUFBaUIsRUFBQUQsRUFBTS9HLEtBQU4sZUFBUDhHLEVBQUcsS0FDWEUsRUFBYzlOLEtBQUttTixFQUFxQlMsSUFFMUNDLEVBQU1DLGNBQWdCQSxFQUFjQyxRQUFPLFNBQUFDLEdBQUcsT0FBQUEsS0FFaEQsTUFBTyxDQUFQLEVBQU9wSCxHQUdQLE1BQU0sSUFBSXRKLE1BQU0sbUNBQW1DYixFQUFJUSxnQkFvQzNELGtDQUNJcVEsRUFDQWpTLEVBQ0FtQyxHLG1FQUVGLE1BQU8sQ0FBUCxFQUFPNFAsRUFBc0IxVyxLQUFLc0YsS0FBSyxRQUFRc1IsRUFBUWpTLEVBQU1tQyxXQUkvRCxzQ0FDSThQLEVBQ0FqUyxFQUNBbUMsRyxtRUFFRixNQUFPLENBQVAsRUFBTzRQLEVBQXNCMVcsS0FBS3NGLEtBQUssWUFBWXNSLEVBQVFqUyxFQUFNbUMsWSxpckRDdEduRSxXQU1BLGdDQUNJbkMsRUFDQW1DLEcsZ0dBRVUsU0FBTXhCLEtBQUs1RSxJQUFJLHlCQUF3QixPQUM5Q29HLEdBQU8sQ0FDVm5DLE1BQU0sRUFBQUMsV0FBV0QsTyxPQUVuQixHQUFlLE1BSlRvQixFQUFNLFVBSUxRLE9BQ0wsTUFBTyxDQUFQLEVBQU9SLEVBQUlFLE1BR1gsTUFBTSxJQUFJVyxNQUFNLHFDQUFxQ2IsRUFBSVEiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgaXNCdWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBlcXVhbCB0byBtZXJnZSB3aXRoIHRoZSBkaWZmZXJlbmNlIGJlaW5nIHRoYXQgbm8gcmVmZXJlbmNlXG4gKiB0byBvcmlnaW5hbCBvYmplY3RzIGlzIGtlcHQuXG4gKlxuICogQHNlZSBtZXJnZVxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZGVlcE1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcE1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGRlZXBNZXJnZTogZGVlcE1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIGNzdiAoaXRlbXM6QXJyYXk8YW55PnxzdHJpbmcpe1xuICBpZih0eXBlb2YgaXRlbXMgPT0gJ3N0cmluZycpe1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICByZXR1cm4gaXRlbXMuam9pbignLCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW5RdWVyeSAocXVlcnk/OntbcGFyYW06c3RyaW5nXTpzdHJpbmd8Ym9vbGVhbnxzdHJpbmdbXXxudW1iZXJ8bnVsbHx1bmRlZmluZWR9KXtcbiAgY29uc3QgY2xlYW5RdWVyeToge1twYXJhbTpzdHJpbmddOnN0cmluZ3xib29sZWFufG51bWJlcn0gPSB7fTtcbiAgaWYoIXF1ZXJ5KXtcbiAgICByZXR1cm4gY2xlYW5RdWVyeTtcbiAgfVxuICBmb3IoY29uc3QgZmllbGQgb2YgT2JqZWN0LmtleXMocXVlcnkpKXtcbiAgICBpZiggdHlwZW9mIHF1ZXJ5W2ZpZWxkXSAhPSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBxdWVyeVtmaWVsZF0hPT1udWxsICYmXG4gICAgICAgICghQXJyYXkuaXNBcnJheShxdWVyeVtmaWVsZF0pfHwocXVlcnlbZmllbGRdIGFzIEFycmF5PGFueT4pLmxlbmd0aCkpe1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgY2xlYW5RdWVyeVtmaWVsZF0gPSBBcnJheS5pc0FycmF5KHF1ZXJ5W2ZpZWxkXSlcbiAgICAgICAgPyAocXVlcnlbZmllbGRdIGFzIEFycmF5PGFueT4pLmpvaW4oJywnKVxuICAgICAgICA6IHF1ZXJ5W2ZpZWxkXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNsZWFuUXVlcnk7XG59IiwiaW1wb3J0IGF4aW9zLCB7XG4gIEF4aW9zSW5zdGFuY2UsXG4gIEF4aW9zUmVxdWVzdENvbmZpZyxcbiAgQXhpb3NSZXNwb25zZVxufSBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUxldmVsaGVhZEFQSSxcbiAgTGV2ZWxoZWFkQVBJXG59IGZyb20gXCIuL2FwaVwiO1xuXG50eXBlIE1ldGhvZCA9IFwiZ2V0XCJ8XCJwb3N0XCJ8XCJwYXRjaFwifFwicHV0XCJ8XCJkZWxldGVcIjtcbnR5cGUgU2VydmVyID0gXCJsb2NhbFwifFwiZGV2XCJ8XCJiZXRhXCI7XG5leHBvcnQgdHlwZSBWZXJzaW9uZWRJdGVtID0gJ3ByaXZhY3knfCd0ZXJtcyd8J3Rlcm1zLXJjZSd8J3J1bXB1cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsZWdhdGlvbk9wdGlvbnMge1xuICBkZWxlZ2F0aW9uS2V5Pzogc3RyaW5nLFxuICBkb05vdFVzZUtleT86IGJvb2xlYW5cbn1cblxuaW50ZXJmYWNlIFJlcXVlc3RPcHRpb25zIGV4dGVuZHMgRGVsZWdhdGlvbk9wdGlvbnMge1xuICBib2R5PzogYW55LFxuICBxdWVyeT86IHtbcGFyYW06c3RyaW5nXTpzdHJpbmd8bnVtYmVyfGJvb2xlYW58dW5kZWZpbmVkfVxufVxuXG5pbnRlcmZhY2UgUnVtcHVzUmVzcG9uc2Uge1xuICBzdGF0dXM6IG51bWJlcixcbiAgZGF0YTogYW55LFxuICBtZXRhPzogYW55LFxuICBtZXNzYWdlPzogc3RyaW5nLFxuICBsb2NhdGlvbj86IHN0cmluZyxcbiAgbmV4dD86IHN0cmluZyxcbiAgZXJyb3JzOiBhbnlbXSxcbiAgaGVhZGVyczoge1toZWFkZXI6c3RyaW5nXTpzdHJpbmd9LFxuICByZXF1ZXN0SWQ6IHN0cmluZyxcbiAgcmVtYWluaW5nUmVxdWVzdHM6IG51bWJlcixcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVtcHVzQ0Uge1xuXG4gIHByaXZhdGUgX3NlcnZlcjogU2VydmVyO1xuICBwcml2YXRlIF9yZXF1ZXN0OiBBeGlvc0luc3RhbmNlO1xuICBwcml2YXRlIF9sZXZlbGhlYWRBUEk6IExldmVsaGVhZEFQSTtcbiAgcHJpdmF0ZSBfYmFzZVVybDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkZWZhdWx0RGVsZWdhdGlvbktleTpzdHJpbmd8dW5kZWZpbmVkID0gcHJvY2Vzcy5lbnYuUlVNUFVTX0RFTEVHQVRJT05fS0VZLFxuICAgIHNlcnZlcjpTZXJ2ZXIgPSAnYmV0YScsXG4gICAgYXV0aD86e3VzZXJuYW1lOnN0cmluZyxwYXNzd29yZDpzdHJpbmd9XG4gICl7XG4gICAgdGhpcy5fc2VydmVyID0gc2VydmVyO1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBzZXJ2ZXIgPT0gJ2xvY2FsJ1xuICAgICAgPyAnaHR0cDovL2xvY2FsaG9zdDo4MDgwJ1xuICAgICAgOiBgaHR0cHM6Ly8ke3RoaXMuX3NlcnZlcn0uYnNjb3RjaC5uZXRgO1xuICAgIHRoaXMuX3JlcXVlc3QgPSBheGlvcy5jcmVhdGUoe2Jhc2VVUkw6dGhpcy5fYmFzZVVybCxhdXRofSk7XG4gICAgdGhpcy5fbGV2ZWxoZWFkQVBJID0gY3JlYXRlTGV2ZWxoZWFkQVBJKHRoaXMpO1xuICB9XG5cbiAgZ2V0IGJhc2VVcmwoKXsgcmV0dXJuIHRoaXMuX2Jhc2VVcmw7IH1cblxuICBnZXQgbGV2ZWxoZWFkKCl7IHJldHVybiB0aGlzLl9sZXZlbGhlYWRBUEk7IH1cblxuICBhc3luYyB2ZXJzaW9uKCl7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXQoJy9hcGkvdmVyc2lvbicse2RvTm90VXNlS2V5OnRydWV9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2VydmVyOiB0aGlzLl9zZXJ2ZXIsXG4gICAgICBydW1wdXM6IHJlcy5kYXRhIGFzIHN0cmluZyxcbiAgICAgIHRlcm1zOiByZXMuaGVhZGVyc1sndmVyc2lvbi10ZXJtcyddLFxuICAgICAgJ3Rlcm1zLXJjZSc6IHJlcy5oZWFkZXJzWyd2ZXJzaW9uLXRlcm1zLXJjZSddLFxuICAgICAgcHJpdmFjeTogcmVzLmhlYWRlcnNbJ3ZlcnNpb24tcHJpdmFjeSddXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGRlbGVnYXRpb25LZXlQZXJtaXNzaW9ucyhkZWxlZ2F0aW9uS2V5PzpzdHJpbmcpe1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KCcvYXBpL2RlbGVnYXRpb24va2V5cy9AdGhpcycse2RlbGVnYXRpb25LZXl9KTtcbiAgICBpZihyZXMuc3RhdHVzPT0yMDApe1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdXNlcklkOiByZXMuZGF0YS51c2VySWQsXG4gICAgICAgIHBhc3NJZDogcmVzLmRhdGEucGFzc0lkLFxuICAgICAgICBwZXJtaXNzaW9uczogcmVzLmRhdGEucGVybWlzc2lvbnNcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYoWzQwMCw0MDNdLmluY2x1ZGVzKHJlcy5zdGF0dXMpKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBvciBtaXNzaW5nIGRlbGVnYXRpb24ga2V5LlwiKTtcbiAgICB9XG4gICAgZWxzZSBpZihyZXMuc3RhdHVzPT00MDEpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwaXJlZCBkZWxlZ2F0aW9uIGtleS5cIik7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHNlcnZlciByZXNwb25zZWwuXCIpO1xuICAgIH1cbiAgfVxuXG4gIGdldCAodXJsOnN0cmluZyxvcHRpb25zPzpSZXF1ZXN0T3B0aW9ucyl7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnZ2V0Jyx1cmwsb3B0aW9ucyk7XG4gIH1cblxuICBwb3N0ICh1cmw6c3RyaW5nLG9wdGlvbnM/OlJlcXVlc3RPcHRpb25zKXtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdwb3N0Jyx1cmwsb3B0aW9ucyk7XG4gIH1cblxuICBwdXQgKHVybDpzdHJpbmcsb3B0aW9ucz86UmVxdWVzdE9wdGlvbnMpe1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ3B1dCcsdXJsLG9wdGlvbnMpO1xuICB9XG5cbiAgcGF0Y2ggKHVybDpzdHJpbmcsb3B0aW9ucz86UmVxdWVzdE9wdGlvbnMpe1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ3BhdGNoJyx1cmwsb3B0aW9ucyk7XG4gIH1cblxuICBkZWxldGUgKHVybDpzdHJpbmcsb3B0aW9ucz86UmVxdWVzdE9wdGlvbnMpe1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ2RlbGV0ZScsdXJsLG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgcmVxdWVzdChtZXRob2Q6TWV0aG9kLHVybDpzdHJpbmcsb3B0aW9ucz86UmVxdWVzdE9wdGlvbnMpOiBQcm9taXNlPFJ1bXB1c1Jlc3BvbnNlPntcbiAgICBjb25zdCBoZWFkZXJzOiB7J1J1bXB1cy1EZWxlZ2F0aW9uLUtleSc/OnN0cmluZ30gPSB7fTtcbiAgICBjb25zdCBrZXkgPSBvcHRpb25zPy5kZWxlZ2F0aW9uS2V5IHx8IHRoaXMuZGVmYXVsdERlbGVnYXRpb25LZXk7XG4gICAgaWYoIW9wdGlvbnM/LmRvTm90VXNlS2V5ICYmIGtleSl7XG4gICAgICBoZWFkZXJzWydSdW1wdXMtRGVsZWdhdGlvbi1LZXknXSA9IGtleTtcbiAgICB9XG4gICAgY29uc3QgcmVxT3B0czogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgaGVhZGVycyxcbiAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgIH07XG4gICAgcmVxT3B0cy5kYXRhID0gb3B0aW9ucz8uYm9keTtcbiAgICByZXFPcHRzLnBhcmFtcyA9IG9wdGlvbnM/LnF1ZXJ5O1xuICAgIGxldCByZXM6IEF4aW9zUmVzcG9uc2U7XG4gICAgdHJ5e1xuICAgICAgcmVzID0gYXdhaXQgdGhpcy5fcmVxdWVzdChyZXFPcHRzKTtcbiAgICB9XG4gICAgY2F0Y2goZXJyKXtcbiAgICAgIGlmKCFlcnIucmVzcG9uc2Upe1xuICAgICAgICAvLyBTb21ldGhpbmcgdGVycmlibGUgaGFzIGhhcHBlbmVkIVxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBhc3N1bWUgdGhhdCBhbiAnZXJyb3InIHJlc3BvbnNlIHRydWx5IGlzIGFuIGVycm9yLFxuICAgICAgLy8gc2luY2UgdGhlIG1lYW5pbmcgb2YgZS5nLiBhIDQwNCBpcyBlbmRwb2ludC1zcGVjaWZpYy5cbiAgICAgIHJlcyA9IGVyci5yZXNwb25zZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnJlcy5kYXRhLFxuICAgICAgaGVhZGVyczpyZXMuaGVhZGVycyxcbiAgICAgIHN0YXR1czogcmVzLnN0YXR1cyxcbiAgICAgIHJlcXVlc3RJZDogcmVzLmhlYWRlcnNbJ3gtcmVxdWVzdC1pZCddLFxuICAgICAgcmVtYWluaW5nUmVxdWVzdHM6IHJlcy5oZWFkZXJzWyd4LXJhdGUtbGltaXQtcmVtYWluaW5nJ11cbiAgICB9O1xuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIC8vIE9ubHkgTm9kZS5KUyBoYXMgYSBwcm9jZXNzIHZhcmlhYmxlIHRoYXQgaXMgb2YgW1tDbGFzc11dIHByb2Nlc3NcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCB8fCAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHV0aWxzLmZvckVhY2goWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ10sIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J10sIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMocHJvcCkge1xuICAgIGlmICh1dGlscy5pc09iamVjdChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goW1xuICAgICdiYXNlVVJMJywgJ3RyYW5zZm9ybVJlcXVlc3QnLCAndHJhbnNmb3JtUmVzcG9uc2UnLCAncGFyYW1zU2VyaWFsaXplcicsXG4gICAgJ3RpbWVvdXQnLCAnd2l0aENyZWRlbnRpYWxzJywgJ2FkYXB0ZXInLCAncmVzcG9uc2VUeXBlJywgJ3hzcmZDb29raWVOYW1lJyxcbiAgICAneHNyZkhlYWRlck5hbWUnLCAnb25VcGxvYWRQcm9ncmVzcycsICdvbkRvd25sb2FkUHJvZ3Jlc3MnLCAnbWF4Q29udGVudExlbmd0aCcsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJywgJ21heFJlZGlyZWN0cycsICdodHRwQWdlbnQnLCAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsXG4gICAgJ3NvY2tldFBhdGgnXG4gIF0sIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiaW1wb3J0IFJ1bXB1c0NFIGZyb20gXCIuLi9SdW1wdXNDRVwiO1xuaW1wb3J0IHtcbiAgZ2V0TGV2ZWxoZWFkQWxpYXNlc1xufSBmcm9tIFwiLi9sZXZlbGhlYWQvYWxpYXNlc1wiO1xuaW1wb3J0IHtcbiAgZ2V0TGV2ZWxoZWFkTGV2ZWxzLFxuICBnZXRMZXZlbGhlYWRMZXZlbFRhZ3MsXG4gIGdldExldmVsaGVhZExldmVsTGlrZXMsXG4gIGdldExldmVsaGVhZExldmVsRmF2b3JpdGVzXG59IGZyb20gXCIuL2xldmVsaGVhZC9sZXZlbHNcIjtcbmltcG9ydCB7XG4gIGdldExldmVsaGVhZFByb2ZpbGVzXG59IGZyb20gXCIuL2xldmVsaGVhZC9wcm9maWxlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdHNQYWdlPHQ+IGV4dGVuZHMgQXJyYXk8dD4ge1xuICBuZXh0UGFnZSgpOlByb21pc2U8UmVzdWx0c1BhZ2U8dD4+XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBibGFua1Jlc3VsdHNQYWdlKCl7XG4gIGNvbnN0IHJlc3VsdHMgPSBbXSBhcyBSZXN1bHRzUGFnZTxuZXZlcj47XG4gIHJlc3VsdHMubmV4dFBhZ2UgPSBibGFua1Jlc3VsdHNQYWdlO1xuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxldmVsaGVhZEFQSShjbGllbnQ6UnVtcHVzQ0Upe1xuICByZXR1cm4ge1xuICAgIGFsaWFzZXM6e1xuICAgICAgc2VhcmNoOiBnZXRMZXZlbGhlYWRBbGlhc2VzLmJpbmQoY2xpZW50KVxuICAgIH0sXG4gICAgbGV2ZWxzOntcbiAgICAgIHNlYXJjaDogZ2V0TGV2ZWxoZWFkTGV2ZWxzLmJpbmQoY2xpZW50KSxcbiAgICAgIHRhZ3M6IGdldExldmVsaGVhZExldmVsVGFncy5iaW5kKGNsaWVudCksXG4gICAgICBsaWtlczogZ2V0TGV2ZWxoZWFkTGV2ZWxMaWtlcy5iaW5kKGNsaWVudCksXG4gICAgICBmYXZvcml0ZXM6IGdldExldmVsaGVhZExldmVsRmF2b3JpdGVzLmJpbmQoY2xpZW50KSxcbiAgICB9LFxuICAgIHByb2ZpbGVzOntcbiAgICAgIHNlYXJjaDogZ2V0TGV2ZWxoZWFkUHJvZmlsZXMuYmluZChjbGllbnQpXG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBsaEFQSUR1bW15ID0gKGZhbHNlIGFzIHRydWUpICYmIGNyZWF0ZUxldmVsaGVhZEFQSShuZXcgUnVtcHVzQ0UoKSk7XG5leHBvcnQgdHlwZSBMZXZlbGhlYWRBUEkgPSB0eXBlb2YgbGhBUElEdW1teTtcbiIsImltcG9ydCBSdW1wdXNDRSBmcm9tIFwiLi4vc3JjL2xpYi9SdW1wdXNDRVwiO1xuXG4vLyBAdHMtaWdub3JlXG53aW5kb3cuUnVtcHVzQ0UgPSBSdW1wdXNDRTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZCA/IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKSA6ICdnZXQnO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIFN1cHBvcnQgYmFzZVVSTCBjb25maWdcbiAgaWYgKGNvbmZpZy5iYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKGNvbmZpZy51cmwpKSB7XG4gICAgY29uZmlnLnVybCA9IGNvbWJpbmVVUkxzKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgfVxuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUnVtcHVzQ0UsIERlbGVnYXRpb25PcHRpb25zfSBmcm9tIFwiLi4vLi4vUnVtcHVzQ0VcIjtcbmltcG9ydCB7Y2xlYW5RdWVyeSxjc3Z9IGZyb20gXCIuLi8uLi91dGlsaXR5XCI7XG5cbmV4cG9ydCB0eXBlIEFsaWFzU2VhcmNoT3B0aW9ucyA9IHtcbiAgdXNlcklkczogc3RyaW5nW118c3RyaW5nLFxuICBvbmx5U2FmZT86IGJvb2xlYW4sXG4gIG1heFJlcG9ydHM/OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbGlhcyB7XG4gIHVzZXJJZDogc3RyaW5nLFxuICBhbGlhczogc3RyaW5nLFxuICBhdmF0YXJJZDogc3RyaW5nLFxuICBjb250ZXh0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExldmVsaGVhZEFsaWFzZXModGhpczpSdW1wdXNDRVxuICAsIHVzZXJJZHM6IHN0cmluZ3xzdHJpbmdbXVxuICAsIHF1ZXJ5PzogQWxpYXNTZWFyY2hPcHRpb25zXG4gICwgb3B0aW9ucz86IERlbGVnYXRpb25PcHRpb25zXG4pe1xuICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldChgL2FwaS9sZXZlbGhlYWQvYWxpYXNlc2Ase1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcXVlcnk6IGNsZWFuUXVlcnkoey4uLnF1ZXJ5LHVzZXJJZHM6Y3N2KHVzZXJJZHMpfSlcbiAgfSk7XG4gIGlmKHJlcy5zdGF0dXM9PTIwMCl7XG4gICAgcmV0dXJuIHJlcy5kYXRhIGFzIEFsaWFzW107XG4gIH1cbiAgZWxzZXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFsaWFzIHNlYXJjaCBmYWlsZWQgd2l0aCBzdGF0dXMgJHtyZXMuc3RhdHVzfWApO1xuICB9XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgUnVtcHVzQ0UsIERlbGVnYXRpb25PcHRpb25zfSBmcm9tIFwiLi4vLi4vUnVtcHVzQ0VcIjtcbmltcG9ydCB7Y2xlYW5RdWVyeX0gZnJvbSBcIi4uLy4uL3V0aWxpdHlcIjtcbmltcG9ydCB7XG4gIExldmVsaGVhZExldmVsVGFnLFxuICBMZXZlbGhlYWRMZXZlbFNlYXJjaCxcbiAgTGV2ZWxoZWFkTGV2ZWxEb3dubG9hZFxufSBmcm9tIFwiLi9sZXZlbHMuZFwiO1xuaW1wb3J0IHtSZXN1bHRzUGFnZSwgYmxhbmtSZXN1bHRzUGFnZX0gZnJvbSBcIi4uXCI7XG5cbmxldCBfY2FjaGVkbG9jYWxpemVkVGFnczoge1t0YWc6c3RyaW5nXTpzdHJpbmd9ID0ge307XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBhZGRMZXZlbEZ1bmN0aW9uYWxpdHkobGV2ZWw6TGV2ZWxoZWFkTGV2ZWxEb3dubG9hZCl7XG4vLyAgIGNvbnN0IGZhbmN5TGV2ZWwgPSBsZXZlbCBhcyBMZXZlbGhlYWRMZXZlbDtcbi8vICAgLy8gZmFuY3lMZXZlbC50b2dnbGVMaWtlKCk9Pnt9O1xuLy8gfVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGV2ZWxoZWFkTGV2ZWxUYWdzKHRoaXM6UnVtcHVzQ0VcbiAgLCBvcHRpb25zPzogRGVsZWdhdGlvbk9wdGlvbnNcbil7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KGAvYXBpL2xldmVsaGVhZC9sZXZlbC10YWdzL2NvdW50c2Asey4uLm9wdGlvbnN9KTtcbiAgaWYocmVzLnN0YXR1cz09MjAwKXtcbiAgICBjb25zdCB0YWdzID0gcmVzLmRhdGEgYXMgTGV2ZWxoZWFkTGV2ZWxUYWdbXTtcbiAgICBfY2FjaGVkbG9jYWxpemVkVGFncyA9IHt9O1xuICAgIGZvcihjb25zdCB0YWcgb2YgdGFncyl7XG4gICAgICBfY2FjaGVkbG9jYWxpemVkVGFnc1t0YWcudGFnXSA9IHRhZy5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gdGFncztcbiAgfVxuICBlbHNle1xuICAgIHRocm93IG5ldyBFcnJvcihgTGV2ZWwgdGFncyByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlcy5zdGF0dXN9YCk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExldmVsaGVhZExldmVscyh0aGlzOlJ1bXB1c0NFXG4gICwgcXVlcnk/OiBMZXZlbGhlYWRMZXZlbFNlYXJjaFxuICAsIG9wdGlvbnM/OiBEZWxlZ2F0aW9uT3B0aW9uc1xuKXtcbiAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5nZXQoYC9hcGkvbGV2ZWxoZWFkL2xldmVsc2Ase1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcXVlcnk6Y2xlYW5RdWVyeShxdWVyeSlcbiAgfSk7XG4gIGlmKHJlcy5zdGF0dXM9PTIwMCl7XG4gICAgY29uc3QgbGV2ZWxzID0gcmVzLmRhdGEgYXMgTGV2ZWxoZWFkTGV2ZWxEb3dubG9hZFtdO1xuICAgIGZvcihjb25zdCBsZXZlbCBvZiBsZXZlbHMpe1xuICAgICAgY29uc3QgbG9jYWxpemVkVGFncyA9IFtdO1xuICAgICAgZm9yKGNvbnN0IHRhZyBvZiBsZXZlbC50YWdzKXtcbiAgICAgICAgbG9jYWxpemVkVGFncy5wdXNoKF9jYWNoZWRsb2NhbGl6ZWRUYWdzW3RhZ10pO1xuICAgICAgfVxuICAgICAgbGV2ZWwubG9jYWxpemVkVGFncyA9IGxvY2FsaXplZFRhZ3MuZmlsdGVyKHg9PngpO1xuICAgIH1cbiAgICByZXR1cm4gbGV2ZWxzO1xuICB9XG4gIGVsc2V7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBMZXZlbCBzZWFyY2ggZmFpbGVkIHdpdGggc3RhdHVzICR7cmVzLnN0YXR1c31gKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRMZXZlbGhlYWRMZXZlbExpc3QodGhpczpSdW1wdXNDRVxuICAsIGxpc3RUeXBlOiAnbGlrZXMnfCdmYXZvcml0ZXMnXG4gICwgbGV2ZWxJZDogc3RyaW5nXG4gICwgcXVlcnk/OiB7bGltaXQ/Om51bWJlcix1c2VySWRzPzpzdHJpbmd8c3RyaW5nW10sYmVmb3JlSWQ/OnN0cmluZyxpbmNsdWRlQWxpYXNlcz86Ym9vbGVhbn1cbiAgLCBvcHRpb25zPzogRGVsZWdhdGlvbk9wdGlvbnNcbil7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZ2V0KGAvYXBpL2xldmVsaGVhZC9sZXZlbHMvJHtsZXZlbElkfS8ke2xpc3RUeXBlfWAse1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcXVlcnk6Y2xlYW5RdWVyeShxdWVyeSlcbiAgfSk7XG4gIGlmKHJlcy5zdGF0dXM9PTIwMCl7XG4gICAgY29uc3QgdXNlcnMgPSByZXMuZGF0YSBhcyBSZXN1bHRzUGFnZTx7X2lkOnN0cmluZyx1c2VySWQ6c3RyaW5nLGFsaWFzPzpzdHJpbmd9PjtcbiAgICBjb25zdCBsYXN0SWQgPSB1c2Vycy5sZW5ndGggJiYgKCFxdWVyeT8ubGltaXQgfHwgcXVlcnkubGltaXQgPT0gdXNlcnMubGVuZ3RoKVxuICAgICA/IHVzZXJzW3VzZXJzLmxlbmd0aC0xXS5faWRcbiAgICAgOiBmYWxzZSA7XG4gICAgaWYobGFzdElkKXtcbiAgICAgIGNvbnN0IG5ld1F1ZXJ5ID0gey4uLnF1ZXJ5LGJlZm9yZUlkOmxhc3RJZH07XG4gICAgICB1c2Vycy5uZXh0UGFnZSA9ICgpPT57XG4gICAgICAgIHJldHVybiBnZXRMZXZlbGhlYWRMZXZlbExpc3QuYmluZCh0aGlzKShsaXN0VHlwZSxsZXZlbElkLG5ld1F1ZXJ5LG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNle1xuICAgICAgdXNlcnMubmV4dFBhZ2UgPSBibGFua1Jlc3VsdHNQYWdlO1xuICAgIH1cbiAgICByZXR1cm4gdXNlcnM7XG4gIH1cbiAgZWxzZXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYExldmVsICR7bGlzdFR5cGV9IGZhaWxlZCB3aXRoIHN0YXR1cyAke3Jlcy5zdGF0dXN9YCk7XG4gIH1cbn1cblxuLyoqIEdldCB0aGUgbGlzdCBvZiB1c2VySWRzIGZvciB1c2VycyB3aG8gbGlrZWQgdGhpcyBsZXZlbC4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMZXZlbGhlYWRMZXZlbExpa2VzKHRoaXM6UnVtcHVzQ0VcbiAgLCBsZXZlbElkOiBzdHJpbmdcbiAgLCBxdWVyeT86IHtsaW1pdD86bnVtYmVyLHVzZXJJZHM/OnN0cmluZ3xzdHJpbmdbXSxiZWZvcmVJZD86c3RyaW5nLGluY2x1ZGVBbGlhc2VzPzpib29sZWFufVxuICAsIG9wdGlvbnM/OiBEZWxlZ2F0aW9uT3B0aW9uc1xuKXtcbiAgcmV0dXJuIGdldExldmVsaGVhZExldmVsTGlzdC5jYWxsKHRoaXMsJ2xpa2VzJyxsZXZlbElkLHF1ZXJ5LG9wdGlvbnMpO1xufVxuXG4vKiogR2V0IHRoZSBsaXN0IG9mIHVzZXJJZHMgZm9yIHVzZXJzIHdobyBmYXZvcml0ZWQgdGhpcyBsZXZlbC4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMZXZlbGhlYWRMZXZlbEZhdm9yaXRlcyh0aGlzOlJ1bXB1c0NFXG4gICwgbGV2ZWxJZDogc3RyaW5nXG4gICwgcXVlcnk/OiB7bGltaXQ/Om51bWJlcix1c2VySWRzPzpzdHJpbmd8c3RyaW5nW10sYmVmb3JlSWQ/OnN0cmluZyxpbmNsdWRlQWxpYXNlcz86Ym9vbGVhbn1cbiAgLCBvcHRpb25zPzogRGVsZWdhdGlvbk9wdGlvbnNcbil7XG4gIHJldHVybiBnZXRMZXZlbGhlYWRMZXZlbExpc3QuY2FsbCh0aGlzLCdmYXZvcml0ZXMnLGxldmVsSWQscXVlcnksb3B0aW9ucyk7XG59XG5cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBSdW1wdXNDRSwgRGVsZWdhdGlvbk9wdGlvbnN9IGZyb20gXCIuLi8uLi9SdW1wdXNDRVwiO1xuaW1wb3J0IHtjbGVhblF1ZXJ5fSBmcm9tIFwiLi4vLi4vdXRpbGl0eVwiO1xuaW1wb3J0IHtcbiAgTGV2ZWxoZWFkUHJvZmlsZSxcbiAgTGV2ZWxoZWFkUHJvZmlsZVNlYXJjaFxufSBmcm9tIFwiLi9wcm9maWxlcy5kXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMZXZlbGhlYWRQcm9maWxlcyh0aGlzOlJ1bXB1c0NFXG4gICwgcXVlcnk/OiBMZXZlbGhlYWRQcm9maWxlU2VhcmNoXG4gICwgb3B0aW9ucz86IERlbGVnYXRpb25PcHRpb25zXG4pe1xuICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmdldChgL2FwaS9sZXZlbGhlYWQvcGxheWVyc2Ase1xuICAgIC4uLm9wdGlvbnMsXG4gICAgcXVlcnk6Y2xlYW5RdWVyeShxdWVyeSlcbiAgfSk7XG4gIGlmKHJlcy5zdGF0dXM9PTIwMCl7XG4gICAgcmV0dXJuIHJlcy5kYXRhIGFzIExldmVsaGVhZFByb2ZpbGVbXTtcbiAgfVxuICBlbHNle1xuICAgIHRocm93IG5ldyBFcnJvcihgUHJvZmlsZSBzZWFyY2ggZmFpbGVkIHdpdGggc3RhdHVzICR7cmVzLnN0YXR1c31gKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==